{"version":3,"file":"processor.js","sources":["../src/processor/logger.ts","../src/processor/SampleTable.ts","../../node_modules/midifile-ts/dist/index.js","../src/processor/insertSorted.ts","../src/processor/SynthEventHandler.ts","../src/processor/AmplitudeEnvelope.ts","../src/processor/LFO.ts","../src/processor/WavetableOscillator.ts","../src/processor/SynthProcessorCore.ts","../src/processor/SynthProcessor.ts","../src/processor/processor.ts"],"sourcesContent":["export class Logger {\n  enabled = true\n\n  log(...args: any) {\n    if (this.enabled) {\n      console.log(...args)\n    }\n  }\n\n  warn(...args: any) {\n    if (this.enabled) {\n      console.warn(...args)\n    }\n  }\n\n  error(...args: any) {\n    if (this.enabled) {\n      console.error(...args)\n    }\n  }\n}\n\nexport const logger = new Logger()\nlogger.enabled = false\n","import { SampleData } from \"../SynthEvent\"\n\ntype Sample = SampleData<Float32Array>\n\nexport type SampleTableItem = Sample & {\n  velRange: [number, number]\n}\n\nexport class SampleTable {\n  private samples: {\n    [bank: number]: {\n      [instrument: number]: { [pitch: number]: SampleTableItem[] }\n    }\n  } = {}\n\n  addSample(\n    sample: Sample,\n    bank: number,\n    instrument: number,\n    keyRange: [number, number],\n    velRange: [number, number]\n  ) {\n    for (let i = keyRange[0]; i <= keyRange[1]; i++) {\n      if (this.samples[bank] === undefined) {\n        this.samples[bank] = {}\n      }\n      if (this.samples[bank][instrument] === undefined) {\n        this.samples[bank][instrument] = {}\n      }\n      if (this.samples[bank][instrument][i] === undefined) {\n        this.samples[bank][instrument][i] = []\n      }\n      this.samples[bank][instrument][i].push({ ...sample, velRange })\n    }\n  }\n\n  getSamples(\n    bank: number,\n    instrument: number,\n    pitch: number,\n    velocity: number\n  ): Sample[] {\n    const samples = this.samples?.[bank]?.[instrument]?.[pitch]\n    return (\n      samples?.filter(\n        (s) => velocity >= s.velRange[0] && velocity <= s.velRange[1]\n      ) ?? []\n    )\n  }\n}\n","var MIDIChannelEvents = {\n    noteOff: 0x08,\n    noteOn: 0x09,\n    noteAftertouch: 0x0a,\n    controller: 0x0b,\n    programChange: 0x0c,\n    channelAftertouch: 0x0d,\n    pitchBend: 0x0e,\n};\n\nvar MIDIControlEventNames = [\n    \"Bank Select\",\n    \"Modulation\",\n    \"Breath Controller\",\n    \"Undefined\",\n    \"Foot Pedal\",\n    \"Portamento Time\",\n    \"Data Entry\",\n    \"Volume\",\n    \"Undefined\",\n    \"Balance\",\n    \"Pan\",\n    \"Expression\",\n    \"Effect Control 1\",\n    \"Effect Control 2\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Ribbon Controller or General Purpose Slider 1\",\n    \"Knob 1 or General Purpose Slider 2\",\n    \"General Purpose Slider 3\",\n    \"Knob 2 or General Purpose Slider 4\",\n    \"Knob 3 or Undefined\",\n    \"Knob 4 or Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Bank Select\",\n    \"Modulation Wheel\",\n    \"Breath controller\",\n    \"Undefined\",\n    \"Foot Pedal\",\n    \"Portamento Time\",\n    \"Data Entry\",\n    \"Volume\",\n    \"Balance\",\n    \"Undefined\",\n    \"Pan position\",\n    \"Expression\",\n    \"Effect Control 1\",\n    \"Effect Control 2\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Hold Pedal\",\n    \"Portamento\",\n    \"Sustenuto Pedal\",\n    \"Soft Pedal\",\n    \"Legato Pedal\",\n    \"Hold 2 Pedal\",\n    \"Sound Variation\",\n    \"Resonance\",\n    \"Sound Release Time\",\n    \"Sound Attack Time\",\n    \"Frequency Cutoff\",\n    \"Sound Control 6\",\n    \"Sound Control 7\",\n    \"Sound Control 8\",\n    \"Sound Control 9\",\n    \"Sound Control 10\",\n    \"Decay\",\n    \"High Pass Filter Frequency\",\n    \"General Purpose Button 3\",\n    \"General Purpose Button 4\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Reverb Level\",\n    \"Tremolo Level\",\n    \"Chorus Level\",\n    \"Detune\",\n    \"Phaser Level\",\n    \"Data Button Increment\",\n    \"Data Button Decrement\",\n    \"NRPN (LSB)\",\n    \"NRPN (MSB)\",\n    \"RPN (LSB)\",\n    \"RPN (MSB)\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"Undefined\",\n    \"All Sound Off\",\n    \"All Controllers Off\",\n    \"Local Keyboard\",\n    \"All Notes Off\",\n    \"Omni Mode Off\",\n    \"Omni Mode On\",\n    \"Mono Operation\",\n    \"Poly Operation\", // CC127\n];\n\nvar MIDIControlEvents = {\n    MSB_BANK: 0x00,\n    MSB_MODWHEEL: 0x01,\n    MSB_BREATH: 0x02,\n    MSB_FOOT: 0x04,\n    MSB_PORTAMENTO_TIME: 0x05,\n    MSB_DATA_ENTRY: 0x06,\n    MSB_MAIN_VOLUME: 0x07,\n    MSB_BALANCE: 0x08,\n    MSB_PAN: 0x0a,\n    MSB_EXPRESSION: 0x0b,\n    MSB_EFFECT1: 0x0c,\n    MSB_EFFECT2: 0x0d,\n    MSB_GENERAL_PURPOSE1: 0x10,\n    MSB_GENERAL_PURPOSE2: 0x11,\n    MSB_GENERAL_PURPOSE3: 0x12,\n    MSB_GENERAL_PURPOSE4: 0x13,\n    LSB_BANK: 0x20,\n    LSB_MODWHEEL: 0x21,\n    LSB_BREATH: 0x22,\n    LSB_FOOT: 0x24,\n    LSB_PORTAMENTO_TIME: 0x25,\n    LSB_DATA_ENTRY: 0x26,\n    LSB_MAIN_VOLUME: 0x27,\n    LSB_BALANCE: 0x28,\n    LSB_PAN: 0x2a,\n    LSB_EXPRESSION: 0x2b,\n    LSB_EFFECT1: 0x2c,\n    LSB_EFFECT2: 0x2d,\n    LSB_GENERAL_PURPOSE1: 0x30,\n    LSB_GENERAL_PURPOSE2: 0x31,\n    LSB_GENERAL_PURPOSE3: 0x32,\n    LSB_GENERAL_PURPOSE4: 0x33,\n    SUSTAIN: 0x40,\n    PORTAMENTO: 0x41,\n    SOSTENUTO: 0x42,\n    SUSTENUTO: 0x42,\n    SOFT_PEDAL: 0x43,\n    LEGATO_FOOTSWITCH: 0x44,\n    HOLD2: 0x45,\n    SC1_SOUND_VARIATION: 0x46,\n    SC2_TIMBRE: 0x47,\n    SC3_RELEASE_TIME: 0x48,\n    SC4_ATTACK_TIME: 0x49,\n    SC5_BRIGHTNESS: 0x4a,\n    SC6: 0x4b,\n    SC7: 0x4c,\n    SC8: 0x4d,\n    SC9: 0x4e,\n    SC10: 0x4f,\n    GENERAL_PURPOSE5: 0x50,\n    GENERAL_PURPOSE6: 0x51,\n    GENERAL_PURPOSE7: 0x52,\n    GENERAL_PURPOSE8: 0x53,\n    PORTAMENTO_CONTROL: 0x54,\n    E1_REVERB_DEPTH: 0x5b,\n    E2_TREMOLO_DEPTH: 0x5c,\n    E3_CHORUS_DEPTH: 0x5d,\n    E4_DETUNE_DEPTH: 0x5e,\n    E5_PHASER_DEPTH: 0x5f,\n    DATA_INCREMENT: 0x60,\n    DATA_DECREMENT: 0x61,\n    NONREG_PARM_NUM_LSB: 0x62,\n    NONREG_PARM_NUM_MSB: 0x63,\n    REGIST_PARM_NUM_LSB: 0x64,\n    REGIST_PARM_NUM_MSB: 0x65,\n    ALL_SOUNDS_OFF: 0x78,\n    RESET_CONTROLLERS: 0x79,\n    LOCAL_CONTROL_SWITCH: 0x7a,\n    ALL_NOTES_OFF: 0x7b,\n    OMNI_OFF: 0x7c,\n    OMNI_ON: 0x7d,\n    MONO1: 0x7e,\n    MONO2: 0x7f,\n};\n\nvar MIDIMetaEventNames = {\n    0x00: \"sequenceNumber\",\n    0x01: \"text\",\n    0x02: \"copyrightNotice\",\n    0x03: \"trackName\",\n    0x04: \"instrumentName\",\n    0x05: \"lyrics\",\n    0x06: \"marker\",\n    0x07: \"cuePoint\",\n    0x20: \"midiChannelPrefix\",\n    0x21: \"portPrefix\",\n    0x2f: \"endOfTrack\",\n    0x51: \"setTempo\",\n    0x54: \"smpteOffset\",\n    0x58: \"timeSignature\",\n    0x59: \"keySignature\",\n    0x7f: \"sequencerSpecific\",\n};\n\nvar MIDIMetaEvents = {\n    sequenceNumber: 0x00,\n    text: 0x01,\n    copyrightNotice: 0x02,\n    trackName: 0x03,\n    instrumentName: 0x04,\n    lyrics: 0x05,\n    marker: 0x06,\n    cuePoint: 0x07,\n    midiChannelPrefix: 0x20,\n    portPrefix: 0x21,\n    endOfTrack: 0x2f,\n    setTempo: 0x51,\n    smpteOffset: 0x54,\n    timeSignature: 0x58,\n    keySignature: 0x59,\n    sequencerSpecific: 0x7f,\n};\n\nfunction deserialize(stream, lastEventTypeByte, setLastEventTypeByte) {\n    if (lastEventTypeByte === void 0) { lastEventTypeByte = 0; }\n    var deltaTime = stream.readVarInt();\n    return deserializeSingleEvent(stream, deltaTime, lastEventTypeByte, setLastEventTypeByte);\n}\nfunction deserializeSingleEvent(stream, deltaTime, lastEventTypeByte, setLastEventTypeByte) {\n    if (deltaTime === void 0) { deltaTime = 0; }\n    if (lastEventTypeByte === void 0) { lastEventTypeByte = 0; }\n    var eventTypeByte = stream.readInt8();\n    if ((eventTypeByte & 0xf0) === 0xf0) {\n        /* system / meta event */\n        if (eventTypeByte === 0xff) {\n            /* meta event */\n            var type = \"meta\";\n            var subtypeByte = stream.readInt8();\n            var length = stream.readVarInt();\n            switch (subtypeByte) {\n                case MIDIMetaEvents.sequenceNumber:\n                    if (length !== 2)\n                        throw new Error(\"Expected length for sequenceNumber event is 2, got \" + length);\n                    return {\n                        deltaTime: deltaTime,\n                        type: type,\n                        subtype: \"sequenceNumber\",\n                        number: stream.readInt16(),\n                    };\n                case MIDIMetaEvents.text:\n                    return {\n                        deltaTime: deltaTime,\n                        type: type,\n                        subtype: \"text\",\n                        text: stream.readStr(length),\n                    };\n                case MIDIMetaEvents.copyrightNotice:\n                    return {\n                        deltaTime: deltaTime,\n                        type: type,\n                        subtype: \"copyrightNotice\",\n                        text: stream.readStr(length),\n                    };\n                case MIDIMetaEvents.trackName:\n                    return {\n                        deltaTime: deltaTime,\n                        type: type,\n                        subtype: \"trackName\",\n                        text: stream.readStr(length),\n                    };\n                case MIDIMetaEvents.instrumentName:\n                    return {\n                        deltaTime: deltaTime,\n                        type: type,\n                        subtype: \"instrumentName\",\n                        text: stream.readStr(length),\n                    };\n                case MIDIMetaEvents.lyrics:\n                    return {\n                        deltaTime: deltaTime,\n                        type: type,\n                        subtype: \"lyrics\",\n                        text: stream.readStr(length),\n                    };\n                case MIDIMetaEvents.marker:\n                    return {\n                        deltaTime: deltaTime,\n                        type: type,\n                        subtype: \"marker\",\n                        text: stream.readStr(length),\n                    };\n                case MIDIMetaEvents.cuePoint:\n                    return {\n                        deltaTime: deltaTime,\n                        type: type,\n                        subtype: \"cuePoint\",\n                        text: stream.readStr(length),\n                    };\n                case MIDIMetaEvents.midiChannelPrefix:\n                    if (length !== 1)\n                        throw new Error(\"Expected length for midiChannelPrefix event is 1, got \" + length);\n                    return {\n                        deltaTime: deltaTime,\n                        type: type,\n                        subtype: \"midiChannelPrefix\",\n                        value: stream.readInt8(),\n                    };\n                case MIDIMetaEvents.portPrefix:\n                    if (length !== 1)\n                        throw new Error(\"Expected length for midiChannelPrefix event is 1, got \" + length);\n                    return {\n                        deltaTime: deltaTime,\n                        type: type,\n                        subtype: \"portPrefix\",\n                        port: stream.readInt8(),\n                    };\n                case MIDIMetaEvents.endOfTrack:\n                    if (length !== 0)\n                        throw new Error(\"Expected length for endOfTrack event is 0, got \" + length);\n                    return {\n                        deltaTime: deltaTime,\n                        type: type,\n                        subtype: \"endOfTrack\",\n                    };\n                case MIDIMetaEvents.setTempo:\n                    if (length !== 3)\n                        throw new Error(\"Expected length for setTempo event is 3, got \" + length);\n                    return {\n                        deltaTime: deltaTime,\n                        type: type,\n                        subtype: \"setTempo\",\n                        microsecondsPerBeat: (stream.readInt8() << 16) +\n                            (stream.readInt8() << 8) +\n                            stream.readInt8(),\n                    };\n                case MIDIMetaEvents.smpteOffset: {\n                    if (length !== 5)\n                        throw new Error(\"Expected length for smpteOffset event is 5, got \" + length);\n                    var hourByte = stream.readInt8();\n                    var table = {\n                        0x00: 24,\n                        0x20: 25,\n                        0x40: 29,\n                        0x60: 30,\n                    };\n                    return {\n                        deltaTime: deltaTime,\n                        type: type,\n                        subtype: \"smpteOffset\",\n                        frameRate: table[hourByte & 0x60],\n                        hour: hourByte & 0x1f,\n                        min: stream.readInt8(),\n                        sec: stream.readInt8(),\n                        frame: stream.readInt8(),\n                        subframe: stream.readInt8(),\n                    };\n                }\n                case MIDIMetaEvents.timeSignature:\n                    if (length !== 4)\n                        throw new Error(\"Expected length for timeSignature event is 4, got \" + length);\n                    return {\n                        deltaTime: deltaTime,\n                        type: type,\n                        subtype: \"timeSignature\",\n                        numerator: stream.readInt8(),\n                        denominator: Math.pow(2, stream.readInt8()),\n                        metronome: stream.readInt8(),\n                        thirtyseconds: stream.readInt8(),\n                    };\n                case MIDIMetaEvents.keySignature:\n                    if (length !== 2)\n                        throw new Error(\"Expected length for keySignature event is 2, got \" + length);\n                    return {\n                        deltaTime: deltaTime,\n                        type: type,\n                        subtype: \"keySignature\",\n                        key: stream.readInt8(true),\n                        scale: stream.readInt8(),\n                    };\n                case MIDIMetaEvents.sequencerSpecific:\n                    return {\n                        deltaTime: deltaTime,\n                        type: type,\n                        subtype: \"sequencerSpecific\",\n                        data: stream.read(length),\n                    };\n                default:\n                    return {\n                        deltaTime: deltaTime,\n                        type: type,\n                        subtype: \"unknown\",\n                        data: stream.read(length),\n                    };\n            }\n        }\n        else if (eventTypeByte === 0xf0) {\n            var length = stream.readVarInt();\n            return {\n                deltaTime: deltaTime,\n                type: \"sysEx\",\n                data: stream.read(length),\n            };\n        }\n        else if (eventTypeByte === 0xf7) {\n            var length = stream.readVarInt();\n            return {\n                deltaTime: deltaTime,\n                type: \"dividedSysEx\",\n                data: stream.read(length),\n            };\n        }\n        else {\n            throw new Error(\"Unrecognised MIDI event type byte: \" + eventTypeByte);\n        }\n    }\n    else {\n        /* channel event */\n        var param1 = void 0;\n        if ((eventTypeByte & 0x80) === 0) {\n            /* running status - reuse lastEventTypeByte as the event type.\n              eventTypeByte is actually the first parameter\n            */\n            param1 = eventTypeByte;\n            eventTypeByte = lastEventTypeByte;\n        }\n        else {\n            param1 = stream.readInt8();\n            setLastEventTypeByte === null || setLastEventTypeByte === void 0 ? void 0 : setLastEventTypeByte(eventTypeByte);\n        }\n        var eventType = eventTypeByte >> 4;\n        var channel = eventTypeByte & 0x0f;\n        var type = \"channel\";\n        switch (eventType) {\n            case MIDIChannelEvents.noteOff:\n                return {\n                    deltaTime: deltaTime,\n                    type: type,\n                    channel: channel,\n                    subtype: \"noteOff\",\n                    noteNumber: param1,\n                    velocity: stream.readInt8(),\n                };\n            case MIDIChannelEvents.noteOn: {\n                var velocity = stream.readInt8();\n                return {\n                    deltaTime: deltaTime,\n                    type: type,\n                    channel: channel,\n                    subtype: velocity === 0 ? \"noteOff\" : \"noteOn\",\n                    noteNumber: param1,\n                    velocity: velocity,\n                };\n            }\n            case MIDIChannelEvents.noteAftertouch:\n                return {\n                    deltaTime: deltaTime,\n                    type: type,\n                    channel: channel,\n                    subtype: \"noteAftertouch\",\n                    noteNumber: param1,\n                    amount: stream.readInt8(),\n                };\n            case MIDIChannelEvents.controller:\n                return {\n                    deltaTime: deltaTime,\n                    type: type,\n                    channel: channel,\n                    subtype: \"controller\",\n                    controllerType: param1,\n                    value: stream.readInt8(),\n                };\n            case MIDIChannelEvents.programChange:\n                return {\n                    deltaTime: deltaTime,\n                    type: type,\n                    channel: channel,\n                    subtype: \"programChange\",\n                    value: param1,\n                };\n            case MIDIChannelEvents.channelAftertouch:\n                return {\n                    deltaTime: deltaTime,\n                    type: type,\n                    channel: channel,\n                    subtype: \"channelAftertouch\",\n                    amount: param1,\n                };\n            case MIDIChannelEvents.pitchBend:\n                return {\n                    deltaTime: deltaTime,\n                    type: type,\n                    channel: channel,\n                    subtype: \"pitchBend\",\n                    value: param1 + (stream.readInt8() << 7),\n                };\n            default:\n                return {\n                    deltaTime: deltaTime,\n                    type: type,\n                    channel: channel,\n                    subtype: \"unknown\",\n                    data: stream.readInt8(),\n                };\n        }\n    }\n}\n\n/* Wrapper for accessing strings through sequential reads */\nvar Stream = /** @class */ (function () {\n    function Stream(buf) {\n        this.position = 0;\n        if (buf instanceof DataView) {\n            this.buf = buf;\n        }\n        else if (buf instanceof ArrayBuffer) {\n            this.buf = new DataView(buf);\n        }\n        else if (buf instanceof Array) {\n            this.buf = new DataView(new Uint8Array(buf).buffer);\n        }\n        else if (buf instanceof Uint8Array) {\n            this.buf = new DataView(buf.buffer);\n        }\n        else {\n            throw new Error(\"not supported type: \" + typeof buf);\n        }\n    }\n    Stream.prototype.readByte = function () {\n        return this.buf.getUint8(this.position++);\n    };\n    Stream.prototype.readStr = function (length) {\n        return this.read(length)\n            .map(function (e) { return String.fromCharCode(e); })\n            .join(\"\");\n    };\n    Stream.prototype.read = function (length) {\n        var result = [];\n        for (var index = 0; index < length; index++) {\n            result.push(this.readByte());\n        }\n        return result;\n    };\n    /* read a big-endian 32-bit integer */\n    Stream.prototype.readInt32 = function () {\n        var result = this.buf.getInt32(this.position, false);\n        this.position += 4;\n        return result;\n    };\n    /* read a big-endian 16-bit integer */\n    Stream.prototype.readInt16 = function () {\n        var result = this.buf.getInt16(this.position, false);\n        this.position += 2;\n        return result;\n    };\n    /* read an 8-bit integer */\n    Stream.prototype.readInt8 = function (signed) {\n        if (signed === void 0) { signed = false; }\n        if (signed) {\n            return this.buf.getInt8(this.position++);\n        }\n        else {\n            return this.readByte();\n        }\n    };\n    Stream.prototype.eof = function () {\n        return this.position >= this.buf.byteLength;\n    };\n    /* read a MIDI-style variable-length integer\n      (big-endian value in groups of 7 bits,\n      with top bit set to signify that another byte follows)\n    */\n    Stream.prototype.readVarInt = function () {\n        var result = 0;\n        for (;;) {\n            var b = this.readInt8();\n            if (b & 0x80) {\n                result += b & 0x7f;\n                result <<= 7;\n            }\n            else {\n                /* b is the last byte */\n                return result + b;\n            }\n        }\n    };\n    return Stream;\n}());\n\n/*\nclass to parse the .mid file format\n(depends on stream.js)\n*/\nfunction read(data) {\n    function readChunk(stream) {\n        var id = stream.readStr(4);\n        var length = stream.readInt32();\n        return {\n            id: id,\n            length: length,\n            data: stream.read(length),\n        };\n    }\n    var stream = new Stream(data);\n    var headerChunk = readChunk(stream);\n    if (headerChunk.id !== \"MThd\" || headerChunk.length !== 6) {\n        throw new Error(\"Bad .mid file - header not found\");\n    }\n    var headerStream = new Stream(headerChunk.data);\n    var formatType = headerStream.readInt16();\n    var trackCount = headerStream.readInt16();\n    var timeDivision = headerStream.readInt16();\n    var ticksPerBeat;\n    if (timeDivision & 0x8000) {\n        throw new Error(\"Expressing time division in SMTPE frames is not supported yet\");\n    }\n    else {\n        ticksPerBeat = timeDivision;\n    }\n    var header = {\n        formatType: formatType,\n        trackCount: trackCount,\n        ticksPerBeat: ticksPerBeat,\n    };\n    var lastEventTypeByte;\n    function readEvent(stream) {\n        return deserialize(stream, lastEventTypeByte, function (byte) { return (lastEventTypeByte = byte); });\n    }\n    var tracks = [];\n    for (var i = 0; i < header.trackCount; i++) {\n        tracks[i] = [];\n        var trackChunk = readChunk(stream);\n        if (trackChunk.id !== \"MTrk\") {\n            throw new Error(\"Unexpected chunk - expected MTrk, got \" + trackChunk.id);\n        }\n        var trackStream = new Stream(trackChunk.data);\n        while (!trackStream.eof()) {\n            var event = readEvent(trackStream);\n            tracks[i].push(event);\n        }\n    }\n    return {\n        header: header,\n        tracks: tracks,\n    };\n}\n\nfunction toCharCodes(str) {\n    var bytes = [];\n    for (var i = 0; i < str.length; i++) {\n        bytes.push(str.charCodeAt(i));\n    }\n    return bytes;\n}\n\n// variable-length quantity\nfunction toVLQ(intNum) {\n    var v = intNum;\n    var r = [v & 0x7f];\n    while (true) {\n        v >>= 7;\n        if (v === 0) {\n            break;\n        }\n        r.unshift(0x80 + (v & 0x7f));\n    }\n    return r;\n}\n\nfunction serialize(e, includeDeltaTime) {\n    if (includeDeltaTime === void 0) { includeDeltaTime = true; }\n    var bytes = [];\n    function add(data) {\n        if (Array.isArray(data)) {\n            data.forEach(add);\n        }\n        else {\n            if (!Number.isInteger(data)) {\n                throw new Error(\"\\\"\".concat(data, \"\\\" is not integer\"));\n            }\n            bytes.push(data);\n        }\n    }\n    if (includeDeltaTime) {\n        add(toVLQ(e.deltaTime));\n    }\n    function addNumbers(list) {\n        add(list.length);\n        list.forEach(function (v) { return add(v); });\n    }\n    function addText(text) {\n        add(text.length);\n        add(toCharCodes(text));\n    }\n    switch (e.type) {\n        case \"meta\": {\n            var subtypeCode = MIDIMetaEvents[e.subtype];\n            if (subtypeCode === undefined) {\n                return [];\n            }\n            add(0xff); // type\n            add(subtypeCode); // subtype\n            switch (e.subtype) {\n                case \"sequenceNumber\":\n                    add(e.number);\n                    break;\n                case \"text\":\n                    addText(e.text);\n                    break;\n                case \"copyrightNotice\":\n                    addText(e.text);\n                    break;\n                case \"trackName\":\n                    addText(e.text);\n                    break;\n                case \"instrumentName\":\n                    addText(e.text);\n                    break;\n                case \"lyrics\":\n                    addText(e.text);\n                    break;\n                case \"marker\":\n                    addText(e.text);\n                    break;\n                case \"cuePoint\":\n                    addText(e.text);\n                    break;\n                case \"midiChannelPrefix\":\n                    addNumbers([e.value]);\n                    break;\n                case \"portPrefix\":\n                    addNumbers([e.port]);\n                    break;\n                case \"endOfTrack\":\n                    add(0);\n                    break;\n                case \"setTempo\": {\n                    var t = e.microsecondsPerBeat;\n                    addNumbers([(t >> 16) & 0xff, (t >> 8) & 0xff, t & 0xff]);\n                    break;\n                }\n                case \"smpteOffset\": {\n                    var frameRateByte = {\n                        24: 0x00,\n                        25: 0x20,\n                        29: 0x40,\n                        30: 0x60,\n                    };\n                    addNumbers([\n                        frameRateByte[e.frameRate] + (0x1f & e.hour),\n                        e.min,\n                        e.sec,\n                        e.frame,\n                        e.subframe,\n                    ]);\n                    break;\n                }\n                case \"timeSignature\": {\n                    addNumbers([\n                        e.numerator,\n                        Math.log2(e.denominator),\n                        e.metronome,\n                        e.thirtyseconds,\n                    ]);\n                    break;\n                }\n                case \"keySignature\": {\n                    addNumbers([e.key, e.scale]);\n                    break;\n                }\n                case \"sequencerSpecific\":\n                    addNumbers(e.data);\n                    break;\n                case \"unknown\":\n                    addNumbers(e.data);\n                    break;\n            }\n            break;\n        }\n        case \"sysEx\":\n            add(0xf0);\n            addNumbers(e.data);\n            break;\n        case \"dividedSysEx\":\n            add(0xf7);\n            addNumbers(e.data);\n            break;\n        case \"channel\": {\n            var subtypeCode = MIDIChannelEvents[e.subtype];\n            if (subtypeCode === undefined) {\n                return [];\n            }\n            add((subtypeCode << 4) + e.channel); // subtype + channel\n            switch (e.subtype) {\n                case \"noteOff\": {\n                    add(e.noteNumber);\n                    add(e.velocity);\n                    break;\n                }\n                case \"noteOn\": {\n                    add(e.noteNumber);\n                    add(e.velocity);\n                    break;\n                }\n                case \"noteAftertouch\": {\n                    add(e.noteNumber);\n                    add(e.amount);\n                    break;\n                }\n                case \"controller\": {\n                    add(e.controllerType);\n                    add(e.value);\n                    break;\n                }\n                case \"programChange\":\n                    add(e.value);\n                    break;\n                case \"channelAftertouch\":\n                    add(e.amount);\n                    break;\n                case \"pitchBend\": {\n                    add(e.value & 0x7f);\n                    add((e.value >> 7) & 0x7f);\n                    break;\n                }\n                case \"unknown\":\n                    add(e.data);\n                    break;\n            }\n            break;\n        }\n    }\n    return bytes;\n}\n\nvar Buffer = /** @class */ (function () {\n    function Buffer() {\n        this.data = [];\n        this.position = 0;\n    }\n    Object.defineProperty(Buffer.prototype, \"length\", {\n        get: function () {\n            return this.data.length;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Buffer.prototype.writeByte = function (v) {\n        this.data.push(v);\n        this.position++;\n    };\n    Buffer.prototype.writeStr = function (str) {\n        this.writeBytes(toCharCodes(str));\n    };\n    Buffer.prototype.writeInt32 = function (v) {\n        this.writeByte((v >> 24) & 0xff);\n        this.writeByte((v >> 16) & 0xff);\n        this.writeByte((v >> 8) & 0xff);\n        this.writeByte(v & 0xff);\n    };\n    Buffer.prototype.writeInt16 = function (v) {\n        this.writeByte((v >> 8) & 0xff);\n        this.writeByte(v & 0xff);\n    };\n    Buffer.prototype.writeBytes = function (arr) {\n        var _this = this;\n        arr.forEach(function (v) { return _this.writeByte(v); });\n    };\n    Buffer.prototype.writeChunk = function (id, func) {\n        this.writeStr(id);\n        var chunkBuf = new Buffer();\n        func(chunkBuf);\n        this.writeInt32(chunkBuf.length);\n        this.writeBytes(chunkBuf.data);\n    };\n    Buffer.prototype.toBytes = function () {\n        return new Uint8Array(this.data);\n    };\n    return Buffer;\n}());\n\n//https://sites.google.com/site/yyagisite/material/smfspec#format\nfunction write(tracks, ticksPerBeat) {\n    if (ticksPerBeat === void 0) { ticksPerBeat = 480; }\n    var buf = new Buffer();\n    // header chunk\n    buf.writeChunk(\"MThd\", function (it) {\n        it.writeInt16(1); // formatType\n        it.writeInt16(tracks.length); // trackCount\n        it.writeInt16(ticksPerBeat); // timeDivision\n    });\n    var _loop_1 = function (track) {\n        buf.writeChunk(\"MTrk\", function (it) {\n            for (var _i = 0, track_1 = track; _i < track_1.length; _i++) {\n                var event = track_1[_i];\n                it.writeBytes(serialize(event));\n            }\n        });\n    };\n    // track chunk\n    for (var _i = 0, tracks_1 = tracks; _i < tracks_1.length; _i++) {\n        var track = tracks_1[_i];\n        _loop_1(track);\n    }\n    return buf.toBytes();\n}\n\nexport { MIDIChannelEvents, MIDIControlEventNames, MIDIControlEvents, MIDIMetaEventNames, MIDIMetaEvents, Stream, deserialize, deserializeSingleEvent, read, serialize, write };\n//# sourceMappingURL=index.js.map\n","// https://gist.github.com/fmal/763d9c953c5a5f8b8f9099dbc58da55e\nexport function insertSorted<T>(arr: T[], item: T, prop: keyof T) {\n  let low = 0\n  let high = arr.length\n  let mid\n  while (low < high) {\n    mid = (low + high) >>> 1 // like (num / 2) but faster\n    if (arr[mid][prop] < item[prop]) {\n      low = mid + 1\n    } else {\n      high = mid\n    }\n  }\n  arr.splice(low, 0, item)\n}\n","import { ControllerEvent, MIDIControlEvents } from \"midifile-ts\"\nimport {\n  ImmediateEvent,\n  MIDIEvent,\n  MIDIEventBody,\n  SynthEvent,\n} from \"../SynthEvent\"\nimport { DistributiveOmit } from \"../types\"\nimport { insertSorted } from \"./insertSorted\"\nimport { logger } from \"./logger\"\nimport { SynthProcessorCore } from \"./SynthProcessorCore\"\n\ntype DelayedEvent = MIDIEvent & { scheduledFrame: number }\ntype RPNControllerEvent = DistributiveOmit<ControllerEvent, \"deltaTime\">\n\ninterface RPN {\n  rpnMSB?: RPNControllerEvent\n  rpnLSB?: RPNControllerEvent\n  dataMSB?: RPNControllerEvent\n  dataLSB?: RPNControllerEvent\n}\n\nexport class SynthEventHandler {\n  private processor: SynthProcessorCore\n  private scheduledEvents: DelayedEvent[] = []\n  private currentEvents: DelayedEvent[] = []\n  private rpnEvents: { [channel: number]: RPN | undefined } = {}\n  private bankSelectMSB: { [channel: number]: number | undefined } = {}\n\n  constructor(processor: SynthProcessorCore) {\n    this.processor = processor\n  }\n\n  private get currentFrame(): number {\n    return this.processor.currentFrame\n  }\n\n  addEvent(e: SynthEvent) {\n    logger.log(e)\n\n    if (\"delayTime\" in e) {\n      // handle in process\n      insertSorted(\n        this.scheduledEvents,\n        {\n          ...e,\n          scheduledFrame: this.currentFrame + e.delayTime,\n        },\n        \"scheduledFrame\"\n      )\n    } else {\n      this.handleImmediateEvent(e)\n    }\n  }\n\n  processScheduledEvents() {\n    if (this.scheduledEvents.length === 0) {\n      return\n    }\n\n    while (true) {\n      const e = this.scheduledEvents[0]\n      if (e === undefined || e.scheduledFrame > this.currentFrame) {\n        // scheduledEvents are sorted by scheduledFrame,\n        // so we can break early instead of iterating through all scheduledEvents,\n        break\n      }\n      this.scheduledEvents.shift()\n      this.currentEvents.push(e)\n    }\n\n    while (true) {\n      const e = this.currentEvents.pop()\n      if (e === undefined) {\n        break\n      }\n      this.handleDelayableEvent(e.midi)\n    }\n  }\n\n  handleImmediateEvent(e: ImmediateEvent) {\n    switch (e.type) {\n      case \"loadSample\":\n        this.processor.loadSample(\n          e.sample,\n          e.bank,\n          e.instrument,\n          e.keyRange,\n          e.velRange\n        )\n        break\n    }\n  }\n\n  handleDelayableEvent(e: MIDIEventBody) {\n    logger.log(\"handle delayable event\", e)\n\n    switch (e.type) {\n      case \"channel\": {\n        switch (e.subtype) {\n          case \"noteOn\":\n            this.processor.noteOn(e.channel, e.noteNumber, e.velocity)\n            break\n          case \"noteOff\":\n            this.processor.noteOff(e.channel, e.noteNumber)\n            break\n          case \"pitchBend\":\n            this.processor.pitchBend(e.channel, e.value)\n            break\n          case \"programChange\":\n            this.processor.programChange(e.channel, e.value)\n            break\n          case \"controller\": {\n            switch (e.controllerType) {\n              case MIDIControlEvents.NONREG_PARM_NUM_MSB:\n              case MIDIControlEvents.NONREG_PARM_NUM_LSB: // NRPN LSB\n                // Delete the rpn for do not send NRPN data events\n                delete this.rpnEvents[e.channel]\n                break\n              case MIDIControlEvents.REGIST_PARM_NUM_MSB: {\n                if (e.value === 127) {\n                  delete this.rpnEvents[e.channel]\n                } else {\n                  this.rpnEvents[e.channel] = {\n                    ...this.rpnEvents[e.channel],\n                    rpnMSB: e,\n                  }\n                }\n                break\n              }\n              case MIDIControlEvents.REGIST_PARM_NUM_LSB: {\n                if (e.value === 127) {\n                  delete this.rpnEvents[e.channel]\n                } else {\n                  this.rpnEvents[e.channel] = {\n                    ...this.rpnEvents[e.channel],\n                    rpnLSB: e,\n                  }\n                }\n                break\n              }\n              case MIDIControlEvents.MSB_DATA_ENTRY: {\n                const rpn = {\n                  ...this.rpnEvents[e.channel],\n                  dataMSB: e,\n                }\n                this.rpnEvents[e.channel] = rpn\n\n                // In case of pitch bend sensitivity,\n                // send without waiting for Data LSB event\n                if (rpn.rpnLSB?.value === 0) {\n                  this.processor.setPitchBendSensitivity(\n                    e.channel,\n                    rpn.dataMSB.value\n                  )\n                }\n                break\n              }\n              case MIDIControlEvents.LSB_DATA_ENTRY: {\n                this.rpnEvents[e.channel] = {\n                  ...this.rpnEvents[e.channel],\n                  dataLSB: e,\n                }\n                // TODO: Send other RPN events\n                break\n              }\n              case MIDIControlEvents.MSB_MAIN_VOLUME:\n                this.processor.setMainVolume(e.channel, e.value)\n                break\n              case MIDIControlEvents.MSB_EXPRESSION:\n                this.processor.expression(e.channel, e.value)\n                break\n              case MIDIControlEvents.ALL_SOUNDS_OFF:\n                this.removeScheduledEvents(e.channel)\n                this.processor.allSoundsOff(e.channel)\n                break\n              case MIDIControlEvents.ALL_NOTES_OFF:\n                this.processor.allNotesOff(e.channel)\n                break\n              case MIDIControlEvents.SUSTAIN:\n                this.processor.hold(e.channel, e.value)\n                break\n              case MIDIControlEvents.MSB_PAN:\n                this.processor.setPan(e.channel, e.value)\n                break\n              case MIDIControlEvents.MSB_MODWHEEL:\n                this.processor.modulation(e.channel, e.value)\n                break\n              case MIDIControlEvents.MSB_BANK:\n                this.bankSelectMSB[e.channel] = e.value\n                break\n              case MIDIControlEvents.LSB_BANK: {\n                const msb = this.bankSelectMSB[e.channel]\n                if (msb !== undefined) {\n                  const bank = (msb << 7) + e.value\n                  this.processor.bankSelect(e.channel, bank)\n                }\n                break\n              }\n              case MIDIControlEvents.RESET_CONTROLLERS:\n                this.processor.resetChannel(e.channel)\n                break\n            }\n            break\n          }\n        }\n        break\n      }\n    }\n  }\n\n  private removeScheduledEvents(channel: number) {\n    this.scheduledEvents = this.scheduledEvents.filter(\n      (e) => e.midi.channel !== channel\n    )\n    this.currentEvents = this.currentEvents.filter(\n      (e) => e.midi.channel !== channel\n    )\n  }\n}\n","export interface AmplitudeEnvelopeParameter {\n  attackTime: number\n  decayTime: number\n  sustainLevel: number\n  releaseTime: number\n}\n\nenum EnvelopePhase {\n  attack,\n  decay,\n  sustain,\n  release,\n  forceStop,\n  stopped,\n}\n\nconst forceStopReleaseTime = 0.1\n\nexport class AmplitudeEnvelope {\n  private readonly parameter: AmplitudeEnvelopeParameter\n  private phase = EnvelopePhase.attack\n  private lastAmplitude = 0\n  private readonly sampleRate: number\n\n  constructor(parameter: AmplitudeEnvelopeParameter, sampleRate: number) {\n    this.parameter = parameter\n    this.sampleRate = sampleRate\n  }\n\n  noteOn() {\n    this.phase = EnvelopePhase.attack\n  }\n\n  noteOff() {\n    if (this.phase !== EnvelopePhase.forceStop) {\n      this.phase = EnvelopePhase.release\n    }\n  }\n\n  // Rapidly decrease the volume. This method ignores release time parameter\n  forceStop() {\n    this.phase = EnvelopePhase.forceStop\n  }\n\n  getAmplitude(bufferSize: number): number {\n    const { attackTime, decayTime, sustainLevel, releaseTime } = this.parameter\n    const { sampleRate } = this\n\n    // Attack\n    switch (this.phase) {\n      case EnvelopePhase.attack: {\n        const amplificationPerFrame =\n          (1 / (attackTime * sampleRate)) * bufferSize\n        const value = this.lastAmplitude + amplificationPerFrame\n        if (value >= 1) {\n          this.phase = EnvelopePhase.decay\n          this.lastAmplitude = 1\n          return 1\n        }\n        this.lastAmplitude = value\n        return value\n      }\n      case EnvelopePhase.decay: {\n        const attenuationPerFrame = (1 / (decayTime * sampleRate)) * bufferSize\n        const value = this.lastAmplitude - attenuationPerFrame\n        if (value <= sustainLevel) {\n          if (sustainLevel <= 0) {\n            this.phase = EnvelopePhase.stopped\n            this.lastAmplitude = 0\n            return 0\n          } else {\n            this.phase = EnvelopePhase.sustain\n            this.lastAmplitude = sustainLevel\n            return sustainLevel\n          }\n        }\n        this.lastAmplitude = value\n        return value\n      }\n      case EnvelopePhase.sustain: {\n        return sustainLevel\n      }\n      case EnvelopePhase.release: {\n        const attenuationPerFrame =\n          (1 / (releaseTime * sampleRate)) * bufferSize\n        const value = this.lastAmplitude - attenuationPerFrame\n        if (value <= 0) {\n          this.phase = EnvelopePhase.stopped\n          this.lastAmplitude = 0\n          return 0\n        }\n        this.lastAmplitude = value\n        return value\n      }\n      case EnvelopePhase.forceStop: {\n        const attenuationPerFrame =\n          (1 / (forceStopReleaseTime * sampleRate)) * bufferSize\n        const value = this.lastAmplitude - attenuationPerFrame\n        if (value <= 0) {\n          this.phase = EnvelopePhase.stopped\n          this.lastAmplitude = 0\n          return 0\n        }\n        this.lastAmplitude = value\n        return value\n      }\n      case EnvelopePhase.stopped: {\n        return 0\n      }\n    }\n  }\n\n  get isPlaying() {\n    return this.phase !== EnvelopePhase.stopped\n  }\n}\n","export class LFO {\n  // Hz\n  frequency = 5\n  private phase = 0\n  private readonly sampleRate: number\n\n  constructor(sampleRate: number) {\n    this.sampleRate = sampleRate\n  }\n\n  getValue(bufferSize: number) {\n    const phase = this.phase\n    this.phase +=\n      ((Math.PI * 2 * this.frequency) / this.sampleRate) * bufferSize\n    return Math.sin(phase)\n  }\n}\n","import { SampleData } from \"../SynthEvent\"\nimport { AmplitudeEnvelope } from \"./AmplitudeEnvelope\"\nimport { LFO } from \"./LFO\"\n\nexport class WavetableOscillator {\n  readonly sample: SampleData<Float32Array>\n  private sampleIndex = 0\n  private _isPlaying = false\n  private _isNoteOff = false\n  private baseSpeed = 1\n  private readonly envelope: AmplitudeEnvelope\n  private readonly pitchLFO: LFO\n  private readonly sampleRate: number\n\n  speed = 1\n  // 0 to 1\n  private velocity = 1\n  // 0 to 1\n  volume = 1\n\n  modulation = 0\n\n  // cent\n  modulationDepthRange = 50\n\n  // -1 to 1\n  pan = 0\n\n  // This oscillator should be note off when hold pedal off\n  isHold = false\n\n  constructor(sample: SampleData<Float32Array>, sampleRate: number) {\n    this.sample = sample\n    this.sampleRate = sampleRate\n    this.envelope = new AmplitudeEnvelope(sample.amplitudeEnvelope, sampleRate)\n    this.pitchLFO = new LFO(sampleRate)\n  }\n\n  noteOn(pitch: number, velocity: number) {\n    this.velocity = velocity\n    this._isPlaying = true\n    this.sampleIndex = this.sample.sampleStart\n    this.baseSpeed = Math.pow(\n      2,\n      ((pitch - this.sample.pitch) / 12) * this.sample.scaleTuning\n    )\n    this.pitchLFO.frequency = 5\n    this.envelope.noteOn()\n  }\n\n  noteOff() {\n    this.envelope.noteOff()\n    this._isNoteOff = true\n  }\n\n  forceStop() {\n    this.envelope.forceStop()\n  }\n\n  process(outputs: Float32Array[]) {\n    if (!this._isPlaying) {\n      return\n    }\n\n    const speed =\n      (this.baseSpeed * this.speed * this.sample.sampleRate) / this.sampleRate\n    const volume = this.velocity * this.volume * this.sample.volume\n\n    // zero to pi/2\n    const panTheta =\n      ((Math.min(1, Math.max(-1, this.pan + this.sample.pan)) + 1) * Math.PI) /\n      4\n    const leftPanVolume = Math.cos(panTheta)\n    const rightPanVolume = Math.sin(panTheta)\n    const gain = this.envelope.getAmplitude(outputs[0].length)\n    const leftGain = gain * volume * leftPanVolume\n    const rightGain = gain * volume * rightPanVolume\n\n    const pitchLFOValue = this.pitchLFO.getValue(outputs[0].length)\n    const pitchModulation =\n      pitchLFOValue * this.modulation * (this.modulationDepthRange / 1200)\n    const modulatedSpeed = speed * (1 + pitchModulation)\n\n    for (let i = 0; i < outputs[0].length; ++i) {\n      const index = Math.floor(this.sampleIndex)\n      const advancedIndex = this.sampleIndex + modulatedSpeed\n      let loopIndex: number | null = null\n\n      if (this.sample.loop !== null && advancedIndex >= this.sample.loop.end) {\n        loopIndex =\n          this.sample.loop.start + (advancedIndex - Math.floor(advancedIndex))\n      }\n\n      const nextIndex =\n        loopIndex !== null\n          ? Math.floor(loopIndex)\n          : Math.min(index + 1, this.sample.sampleEnd - 1)\n\n      // linear interpolation\n      const current = this.sample.buffer[index]\n      const next = this.sample.buffer[nextIndex]\n      const level = current + (next - current) * (this.sampleIndex - index)\n\n      outputs[0][i] += level * leftGain\n      outputs[1][i] += level * rightGain\n\n      this.sampleIndex = loopIndex ?? advancedIndex\n\n      if (this.sampleIndex >= this.sample.sampleEnd) {\n        this._isPlaying = false\n        break\n      }\n    }\n  }\n\n  get isPlaying() {\n    return this._isPlaying && this.envelope.isPlaying\n  }\n\n  get isNoteOff() {\n    return this._isNoteOff\n  }\n\n  get exclusiveClass() {\n    return this.sample.exclusiveClass\n  }\n}\n","import { SampleData, SynthEvent } from \"../SynthEvent\"\nimport { logger } from \"./logger\"\nimport { SampleTable } from \"./SampleTable\"\nimport { SynthEventHandler } from \"./SynthEventHandler\"\nimport { WavetableOscillator } from \"./WavetableOscillator\"\n\ninterface ChannelState {\n  volume: number // 0 to 1\n  bank: number\n  instrument: number\n  pitchBend: number // in semitone\n  pitchBendSensitivity: number // in semitone\n  expression: number // 0 to 1\n  pan: number // -1 to 1\n  modulation: number\n  oscillators: { [key: number]: WavetableOscillator[] }\n  hold: boolean\n}\n\nconst initialChannelState = (): ChannelState => ({\n  volume: 1,\n  bank: 0,\n  instrument: 0,\n  pitchBend: 0,\n  pitchBendSensitivity: 2,\n  oscillators: {},\n  expression: 1,\n  pan: 0,\n  modulation: 0,\n  hold: false,\n})\n\nconst RHYTHM_CHANNEL = 9\nconst RHYTHM_BANK = 128\n\ntype Sample = SampleData<Float32Array>\n\nexport class SynthProcessorCore {\n  private sampleTable = new SampleTable()\n  private channels: { [key: number]: ChannelState } = {}\n  private readonly eventHandler: SynthEventHandler\n  private readonly sampleRate: number\n  private readonly getCurrentFrame: () => number\n\n  constructor(sampleRate: number, getCurrentFrame: () => number) {\n    this.eventHandler = new SynthEventHandler(this)\n    this.sampleRate = sampleRate\n    this.getCurrentFrame = getCurrentFrame\n  }\n\n  get currentFrame(): number {\n    return this.getCurrentFrame()\n  }\n\n  private getSamples(\n    channel: number,\n    pitch: number,\n    velocity: number\n  ): Sample[] {\n    const state = this.getChannelState(channel)\n    // Play drums for CH.10\n    const bank = channel === RHYTHM_CHANNEL ? RHYTHM_BANK : state.bank\n    return this.sampleTable.getSamples(bank, state.instrument, pitch, velocity)\n  }\n\n  loadSample(\n    sample: SampleData<ArrayBuffer>,\n    bank: number,\n    instrument: number,\n    keyRange: [number, number],\n    velRange: [number, number]\n  ) {\n    const _sample: Sample = {\n      ...sample,\n      buffer: new Float32Array(sample.buffer),\n    }\n    this.sampleTable.addSample(_sample, bank, instrument, keyRange, velRange)\n  }\n\n  addEvent(e: SynthEvent) {\n    this.eventHandler.addEvent(e)\n  }\n\n  noteOn(channel: number, pitch: number, velocity: number) {\n    const state = this.getChannelState(channel)\n\n    const samples = this.getSamples(channel, pitch, velocity)\n\n    if (samples.length === 0) {\n      logger.warn(\n        `There is no sample for noteNumber ${pitch} in instrument ${state.instrument} in bank ${state.bank}`\n      )\n      return\n    }\n\n    for (const sample of samples) {\n      const oscillator = new WavetableOscillator(sample, this.sampleRate)\n\n      const volume = velocity / 0x80\n      oscillator.noteOn(pitch, volume)\n\n      if (state.oscillators[pitch] === undefined) {\n        state.oscillators[pitch] = []\n      }\n\n      if (sample.exclusiveClass !== undefined) {\n        for (const key in state.oscillators) {\n          for (const osc of state.oscillators[key]) {\n            if (osc.exclusiveClass === sample.exclusiveClass) {\n              osc.forceStop()\n            }\n          }\n        }\n      }\n\n      state.oscillators[pitch].push(oscillator)\n    }\n  }\n\n  noteOff(channel: number, pitch: number) {\n    const state = this.getChannelState(channel)\n\n    if (state.oscillators[pitch] === undefined) {\n      return\n    }\n\n    for (const osc of state.oscillators[pitch]) {\n      if (!osc.isNoteOff) {\n        if (state.hold) {\n          osc.isHold = true\n        } else {\n          osc.noteOff()\n        }\n      }\n    }\n  }\n\n  pitchBend(channel: number, value: number) {\n    const state = this.getChannelState(channel)\n    state.pitchBend = (value / 0x2000 - 1) * state.pitchBendSensitivity\n  }\n\n  programChange(channel: number, value: number) {\n    const state = this.getChannelState(channel)\n    state.instrument = value\n  }\n\n  setPitchBendSensitivity(channel: number, value: number) {\n    const state = this.getChannelState(channel)\n    state.pitchBendSensitivity = value\n  }\n\n  setMainVolume(channel: number, value: number) {\n    const state = this.getChannelState(channel)\n    state.volume = value / 0x80\n  }\n\n  expression(channel: number, value: number) {\n    const state = this.getChannelState(channel)\n    state.expression = value / 0x80\n  }\n\n  allSoundsOff(channel: number) {\n    const state = this.getChannelState(channel)\n\n    for (const key in state.oscillators) {\n      for (const osc of state.oscillators[key]) {\n        osc.forceStop()\n      }\n    }\n  }\n\n  allNotesOff(channel: number) {\n    const state = this.getChannelState(channel)\n\n    for (const key in state.oscillators) {\n      for (const osc of state.oscillators[key]) {\n        osc.noteOff()\n      }\n    }\n  }\n\n  hold(channel: number, value: number) {\n    const hold = value >= 64\n    const state = this.getChannelState(channel)\n    state.hold = hold\n\n    if (hold) {\n      return\n    }\n\n    for (const key in state.oscillators) {\n      for (const osc of state.oscillators[key]) {\n        if (osc.isHold) {\n          osc.noteOff()\n        }\n      }\n    }\n  }\n\n  setPan(channel: number, value: number) {\n    const state = this.getChannelState(channel)\n    state.pan = (value / 127 - 0.5) * 2\n  }\n\n  bankSelect(channel: number, value: number) {\n    const state = this.getChannelState(channel)\n    state.bank = value\n  }\n\n  modulation(channel: number, value: number) {\n    const state = this.getChannelState(channel)\n    state.modulation = value / 0x80\n  }\n\n  resetChannel(channel: number) {\n    delete this.channels[channel]\n  }\n\n  private getChannelState(channel: number): ChannelState {\n    const state = this.channels[channel]\n    if (state !== undefined) {\n      return state\n    }\n    const newState = initialChannelState()\n    this.channels[channel] = newState\n    return newState\n  }\n\n  process(outputs: Float32Array[]): void {\n    this.eventHandler.processScheduledEvents()\n\n    for (const channel in this.channels) {\n      const state = this.channels[channel]\n\n      for (let key in state.oscillators) {\n        state.oscillators[key] = state.oscillators[key].filter((oscillator) => {\n          oscillator.speed = Math.pow(2, state.pitchBend / 12)\n          oscillator.volume = state.volume * state.expression\n          oscillator.pan = state.pan\n          oscillator.modulation = state.modulation\n          oscillator.process([outputs[0], outputs[1]])\n\n          if (!oscillator.isPlaying) {\n            return false\n          }\n          return true\n        })\n      }\n    }\n\n    // master volume\n    const masterVolume = 0.3\n    for (let i = 0; i < outputs[0].length; ++i) {\n      outputs[0][i] *= masterVolume\n      outputs[1][i] *= masterVolume\n    }\n  }\n}\n","import { SynthEvent } from \"..\"\nimport { SynthProcessorCore } from \"./SynthProcessorCore\"\n\nexport class SynthProcessor extends AudioWorkletProcessor {\n  private readonly synth = new SynthProcessorCore(\n    sampleRate,\n    () => currentFrame\n  )\n\n  constructor() {\n    super()\n\n    this.port.onmessage = (e: MessageEvent<SynthEvent>) => {\n      this.synth.addEvent(e.data)\n    }\n  }\n\n  process(_inputs: Float32Array[][], outputs: Float32Array[][]) {\n    this.synth.process(outputs[0])\n    return true\n  }\n}\n","import { SynthProcessor } from \"./SynthProcessor\"\n\nregisterProcessor(\"synth-processor\", SynthProcessor)\n"],"names":[],"mappings":"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"}