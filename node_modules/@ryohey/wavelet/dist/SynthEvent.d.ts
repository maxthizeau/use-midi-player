import { AnyChannelEvent } from "midifile-ts";
import { AmplitudeEnvelopeParameter } from "./processor/AmplitudeEnvelope";
import { DistributiveOmit } from "./types";
export interface SampleLoop {
    start: number;
    end: number;
}
export interface SampleData<BufferType> {
    name: string;
    buffer: BufferType;
    pitch: number;
    loop: SampleLoop | null;
    sampleStart: number;
    sampleEnd: number;
    sampleRate: number;
    amplitudeEnvelope: AmplitudeEnvelopeParameter;
    scaleTuning: number;
    pan: number;
    exclusiveClass?: number | undefined;
    volume: number;
}
export interface LoadSampleEvent {
    type: "loadSample";
    sample: SampleData<ArrayBuffer>;
    bank: number;
    instrument: number;
    keyRange: [number, number];
    velRange: [number, number];
}
export type MIDIEventBody = DistributiveOmit<AnyChannelEvent, "deltaTime">;
export type MIDIEvent = {
    type: "midi";
    midi: MIDIEventBody;
    delayTime: number;
};
export type ImmediateEvent = LoadSampleEvent;
export type SynthEvent = ImmediateEvent | MIDIEvent;
export declare const DrumInstrumentNumber = 128;
